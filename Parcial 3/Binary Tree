#include <stdio.h>

#define MAX_HEAP_SIZE 100

// --- Variables Globales ---
int heap[MAX_HEAP_SIZE];
int heapSize = 0;

// --- Prototipos de Funciones ---
void swap(int *a, int *b);
void reHeapUp(int i);
void insert(int item);
void showHeap(void);
void reHeapDown(int i);
int removeMax(void);
void printTreeStructure(void);


// --- Funci√≥n Principal ---
int main() {
    // Secuencia de enteros a insertar
    int data[] = {10, 40, 15, 60, 50, 25, 5, 80};
    int n = sizeof(data) / sizeof(data[0]);
    int i;

    printf("--- Fase de Insercion ---\n");
    for (i = 0; i < n; i++) {
        printf("Insertando %d...\n", data[i]);
        insert(data[i]);
        printf("Heap actual: ");
        showHeap();
    }

    printf("\n--- Heap final despues de inserciones ---\n");
    printf("Heap: ");
    showHeap();
    printf("\nEstructura del Arbol (mapeo Arreglo-Arbol):\n");
    printTreeStructure();

    // Remover el elemento maximo K veces
    int K = 3;
    printf("\n--- Fase de Eliminacion (K = %d) ---\n", K);
    for (i = 0; i < K; i++) {
        if (heapSize > 0) {
            printf("Removiendo el maximo: %d\n", removeMax());
            printf("Heap actual: ");
            showHeap();
        } else {
            printf("El heap esta vacio. No se puede remover.\n");
            break;
        }
    }
    
    printf("\n--- Heap final despues de eliminaciones ---\n");
     if (heapSize > 0) {
        printf("Heap: ");
        showHeap();
        printf("\nEstructura del Arbol (mapeo Arreglo-Arbol):\n");
        printTreeStructure();
    } else {
        printf("El heap quedo vacio.\n");
    }

    return 0;
}

/**
 * @brief Intercambia dos valores enteros.
 * @param a Puntero al primer entero.
 * @param b Puntero al segundo entero.
 */
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

/**
 * @brief Restaura la propiedad del Max-Heap subiendo un elemento desde el indice i.
 * Se usa despues de una insercion.
 * @param i Indice del elemento a "flotar" hacia arriba.
 */
void reHeapUp(int i) {
    // Mientras el nodo no sea la raiz y sea mayor que su padre
    while (i > 0 && heap[i] > heap[(i - 1) / 2]) {
        // Intercambiar el nodo con su padre
        swap(&heap[i], &heap[(i - 1) / 2]);
        // Moverse al indice del padre para continuar la revision
        i = (i - 1) / 2;
    }
}

/**
 * @brief Inserta un nuevo elemento en el heap.
 * @param item El valor entero a insertar.
 */
void insert(int item) {
    if (heapSize >= MAX_HEAP_SIZE) {
        printf("Error: Heap lleno.\n");
        return;
    }
    // 1. Anadir el elemento al final del arreglo
    heap[heapSize] = item;
    // 2. Aumentar el tamano del heap
    heapSize++;
    // 3. Reordenar hacia arriba (reHeapUp) para mantener la propiedad del heap
    reHeapUp(heapSize - 1);
}

/**
 * @brief Imprime el contenido del heap en formato de arreglo.
 */
void showHeap(void) {
    printf("[ ");
    for (int i = 0; i < heapSize; i++) {
        printf("%d ", heap[i]);
    }
    printf("]\n");
}

/**
 * @brief Restaura la propiedad del Max-Heap bajando un elemento desde el indice i.
 * Se usa despues de eliminar el maximo.
 * @param i Indice del elemento a "hundir".
 */
void reHeapDown(int i) {
    int largest = i;          // Suponemos que el padre es el mas grande
    int leftChild = 2 * i + 1;  // Indice del hijo izquierdo
    int rightChild = 2 * i + 2; // Indice del hijo derecho

    // Si el hijo izquierdo existe y es mayor que el padre actual
    if (leftChild < heapSize && heap[leftChild] > heap[largest]) {
        largest = leftChild;
    }

    // Si el hijo derecho existe y es mayor que el mas grande hasta ahora
    if (rightChild < heapSize && heap[rightChild] > heap[largest]) {
        largest = rightChild;
    }

    // Si el mas grande no es el padre original, intercambiar y seguir bajando
    if (largest != i) {
        swap(&heap[i], &heap[largest]);
        // Llamada recursiva en el subarbol afectado
        reHeapDown(largest);
    }
}

/**
 * @brief Remueve y retorna el elemento maximo del heap (la raiz).
 * @return El valor del elemento maximo.
 */
int removeMax(void) {
    if (heapSize <= 0) {
        return -1; // O manejar el error de otra forma
    }
    if (heapSize == 1) {
        heapSize--;
        return heap[0];
    }

    // 1. Guardar el valor maximo (la raiz)
    int maxItem = heap[0];

    // 2. Mover el ultimo elemento a la raiz
    heap[0] = heap[heapSize - 1];

    // 3. Reducir el tamano del heap
    heapSize--;

    // 4. Reordenar hacia abajo (reHeapDown) desde la raiz para restaurar la propiedad
    reHeapDown(0);

    return maxItem;
}

/**
 * @brief Proporciona una funcion para imprimir cada nodo con sus hijos izquierdo/derecho
 * (usando indices) para reforzar el mapeo de arreglo a arbol.
 */
void printTreeStructure(void) {
    if(heapSize == 0) {
        printf("El arbol esta vacio.\n");
        return;
    }
    
    for (int i = 0; i < heapSize; i++) {
        printf("Nodo Padre: heap[%d] = %d\n", i, heap[i]);
        int leftChildIdx = 2 * i + 1;
        int rightChildIdx = 2 * i + 2;

        if (leftChildIdx < heapSize) {
            printf("  -> Hijo Izquierdo: heap[%d] = %d\n", leftChildIdx, heap[leftChildIdx]);
        } else {
            printf("  -> Hijo Izquierdo: (ninguno)\n");
        }

        if (rightChildIdx < heapSize) {
            printf("  -> Hijo Derecho: heap[%d] = %d\n", rightChildIdx, heap[rightChildIdx]);
        } else {
            printf("  -> Hijo Derecho: (ninguno)\n");
        }
    }
}
