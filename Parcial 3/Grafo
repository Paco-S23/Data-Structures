#include <stdio.h>
#include <stdlib.h>

// Estructura para un nodo de la lista de adyacencia
struct Node {
    int vertex;
    struct Node* next;
};

// Estructura para el Grafo
struct Graph {
    int numVertices;
    struct Node** adjLists; // Arreglo de punteros a Node
};

// Crear un nodo
struct Node* createNode(int v) {
    struct Node* newNode = malloc(sizeof(struct Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

// Crear un grafo
struct Graph* createGraph(int vertices) {
    struct Graph* graph = malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    graph->adjLists = malloc(vertices * sizeof(struct Node*));

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

// Añadir una arista dirigida
void addEdge(struct Graph* graph, int src, int dest) {
    // Añadir arista de src a dest. Se añade al inicio de la lista.
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

// Imprimir la lista de adyacencia
void printGraph(struct Graph* graph, char* vertexLabels) {
    for (int v = 0; v < graph->numVertices; v++) {
        struct Node* temp = graph->adjLists[v];
        printf("%c -> ", vertexLabels[v]);
        while (temp) {
            printf("%c -> ", vertexLabels[temp->vertex]);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

int main() {
    char vertexLabels[] = {'A', 'B', 'C', 'D'};
    // Índices: A=0, B=1, C=2, D=3
    int numVertices = 4;
    
    struct Graph* graph = createGraph(numVertices);
    
    // Añadimos las aristas dirigidas
    addEdge(graph, 0, 1); // A -> B
    addEdge(graph, 0, 2); // A -> C
    addEdge(graph, 1, 3); // B -> D

    printf("Lista de Adyacencia (Dirigido):\n");
    printGraph(graph, vertexLabels);

    return 0;
}
